// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.unige;

import ch.unige.UserProfile;
import ch.unige.UserProfileBean;
import ch.unige.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect UserProfileBean_Roo_ManagedBean {
    
    declare @type: UserProfileBean: @ManagedBean(name = "userProfileBean");
    
    declare @type: UserProfileBean: @SessionScoped;
    
    private String UserProfileBean.name = "UserProfiles";
    
    private UserProfile UserProfileBean.userProfile;
    
    private List<UserProfile> UserProfileBean.allUserProfiles;
    
    private boolean UserProfileBean.dataVisible = false;
    
    private List<String> UserProfileBean.columns;
    
    private HtmlPanelGrid UserProfileBean.createPanelGrid;
    
    private HtmlPanelGrid UserProfileBean.editPanelGrid;
    
    private HtmlPanelGrid UserProfileBean.viewPanelGrid;
    
    private boolean UserProfileBean.createDialogVisible = false;
    
    @PostConstruct
    public void UserProfileBean.init() {
        columns = new ArrayList<String>();
        columns.add("username");
        columns.add("password");
    }
    
    public String UserProfileBean.getName() {
        return name;
    }
    
    public List<String> UserProfileBean.getColumns() {
        return columns;
    }
    
    public List<UserProfile> UserProfileBean.getAllUserProfiles() {
        return allUserProfiles;
    }
    
    public void UserProfileBean.setAllUserProfiles(List<UserProfile> allUserProfiles) {
        this.allUserProfiles = allUserProfiles;
    }
    
    public String UserProfileBean.findAllUserProfiles() {
        allUserProfiles = UserProfile.findAllUserProfiles();
        dataVisible = !allUserProfiles.isEmpty();
        return null;
    }
    
    public boolean UserProfileBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UserProfileBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UserProfileBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UserProfileBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UserProfileBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UserProfileBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UserProfileBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UserProfileBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UserProfileBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel usernameCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameCreateOutput.setFor("usernameCreateInput");
        usernameCreateOutput.setId("usernameCreateOutput");
        usernameCreateOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameCreateOutput);
        
        InputText usernameCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameCreateInput.setId("usernameCreateInput");
        usernameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.username}", String.class));
        usernameCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(usernameCreateInput);
        
        Message usernameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameCreateInputMessage.setId("usernameCreateInputMessage");
        usernameCreateInputMessage.setFor("usernameCreateInput");
        usernameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameCreateInputMessage);
        
        OutputLabel passwordCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordCreateOutput.setFor("passwordCreateInput");
        passwordCreateOutput.setId("passwordCreateOutput");
        passwordCreateOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordCreateOutput);
        
        InputText passwordCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordCreateInput.setId("passwordCreateInput");
        passwordCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.password}", String.class));
        passwordCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordCreateInput);
        
        Message passwordCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordCreateInputMessage.setId("passwordCreateInputMessage");
        passwordCreateInputMessage.setFor("passwordCreateInput");
        passwordCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserProfileBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel usernameEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        usernameEditOutput.setFor("usernameEditInput");
        usernameEditOutput.setId("usernameEditOutput");
        usernameEditOutput.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameEditOutput);
        
        InputText usernameEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        usernameEditInput.setId("usernameEditInput");
        usernameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.username}", String.class));
        usernameEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(usernameEditInput);
        
        Message usernameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usernameEditInputMessage.setId("usernameEditInputMessage");
        usernameEditInputMessage.setFor("usernameEditInput");
        usernameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usernameEditInputMessage);
        
        OutputLabel passwordEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        passwordEditOutput.setFor("passwordEditInput");
        passwordEditOutput.setId("passwordEditOutput");
        passwordEditOutput.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordEditOutput);
        
        InputText passwordEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        passwordEditInput.setId("passwordEditInput");
        passwordEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.password}", String.class));
        passwordEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(passwordEditInput);
        
        Message passwordEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        passwordEditInputMessage.setId("passwordEditInputMessage");
        passwordEditInputMessage.setFor("passwordEditInput");
        passwordEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(passwordEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UserProfileBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usernameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameLabel.setId("usernameLabel");
        usernameLabel.setValue("Username:");
        htmlPanelGrid.getChildren().add(usernameLabel);
        
        HtmlOutputText usernameValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usernameValue.setId("usernameValue");
        usernameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.username}", String.class));
        htmlPanelGrid.getChildren().add(usernameValue);
        
        HtmlOutputText passwordLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordLabel.setId("passwordLabel");
        passwordLabel.setValue("Password:");
        htmlPanelGrid.getChildren().add(passwordLabel);
        
        HtmlOutputText passwordValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        passwordValue.setId("passwordValue");
        passwordValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{userProfileBean.userProfile.password}", String.class));
        htmlPanelGrid.getChildren().add(passwordValue);
        
        return htmlPanelGrid;
    }
    
    public UserProfile UserProfileBean.getUserProfile() {
        if (userProfile == null) {
            userProfile = new UserProfile();
        }
        return userProfile;
    }
    
    public void UserProfileBean.setUserProfile(UserProfile userProfile) {
        this.userProfile = userProfile;
    }
    
    public String UserProfileBean.onEdit() {
        return null;
    }
    
    public boolean UserProfileBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UserProfileBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UserProfileBean.displayList() {
        createDialogVisible = false;
        findAllUserProfiles();
        return "userProfile";
    }
    
    public String UserProfileBean.displayCreateDialog() {
        userProfile = new UserProfile();
        createDialogVisible = true;
        return "userProfile";
    }
    
    public String UserProfileBean.persist() {
        String message = "";
        if (userProfile.getId() != null) {
            userProfile.merge();
            message = "message_successfully_updated";
        } else {
            userProfile.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "UserProfile");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUserProfiles();
    }
    
    public String UserProfileBean.delete() {
        userProfile.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "UserProfile");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUserProfiles();
    }
    
    public void UserProfileBean.reset() {
        userProfile = null;
        createDialogVisible = false;
    }
    
    public void UserProfileBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
